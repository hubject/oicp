

image::images/hubjectlogo.png[float="right", align="right"]

[[services_and_operations]]
== Services and Operations

All described services are offered by Hubject. Some of the described services `MUST` also be offered by the connected provider systems because Hubject forwards incoming requests to partners which presumes that the corresponding service is offered by that partner (e.g. <<eRoamingAuthorization,eRoamingAuthorization>>)

Other services will only be consumed by partner systems, meaning that these services do not have to be offered by the partner system (e.g. the <<eRoamingAuthenticationData,eRoamingAuthenticationData>> service will be offered by Hubject only).

The names of all following services contain a version and are based on the pattern “<service>_V<version>”, e.g. “eRoamingAuthorization_V2.1”. The reason for this being that Hubject potentially has to offer different versions of a service at the same time. This requires different technical service endpoints (service URLs) and the version in the service name is used to enable the service endpoint differentiation.


[[eRoamingAuthorization]]
== eRoamingAuthorization
The service eRoamingAuthorization contains several different operations. It `MUST` be offered by Hubject and the partner systems.

[[eRoamingAuthoizeStart]]
=== eRoamingAuthorizeStart_V2.1

[NOTE]
====
- To `RECEIVE`
- Implementation: `MANDATORY`
====

- <<eRoamingAuthorizeStartmessage,Request message: eRoamingAuthorizeStart>>
- <<eRoamingAuthorizationStartmessage,Response message:eRoamingAuthorizationStart>>

[.underline]#*Functional Description:*#

Scenario:

A customer of an EMP wants to charge a vehicle at a charging point of a CPO. The customer authenticates at the charging point. The CPO’s operator system does not recognize the customer’s authentication data. In order to authorize the charging process, the CPO’s system can send an eRoamingAuthorizeStart request to Hubject. The request `MUST` contain the OperatorID and the identification data (e.g. UID or EvcoID) and `MAY` contain the EvseID.

Hubject generates a SessionID for the charging process and persists important session data (SessionID, EvseID, identification data).

Regarding the further service processing, there are three different options:

[upperalpha]
..	Hubject first tries to authorize the customer offline by checking authentication master data. Authentication data can be uploaded by EMPs using the eRoamingAuthenticationData service.

image::images/authorizestart_offline.png[]

[upperalpha, start=2]
.. In case offline authorization is not possible, Hubject tries to derive the EMP from the provided identification data. QR Code and Plug&Charge identification data contain the EvcoID. Hubject can derive the EMP’s ProviderID from the EvcoID. Hubject will directly forward eRoamingAuthorizeStart requests to the EMP. The EMP provider system checks the requested authentication data and responds accordingly, either by authorizing or not authorizing the request. The response `MUST` contain the ProviderID and the AuthorizationStatus and `MAY` contain a list of identification data that is authorized to stop the charging process. In case that the EMP provider system cannot be addressed (e.g. due to technical problems), the corresponding provider will be dealt with as if responding “NotAuthorized”.

image::images/authorize_evco.png[]

[upperalpha, start=3]

.. In case that Hubject cannot derive the EMP from the identification data (e.g. with RFID identification), Hubject identifies all EMPs that are under contract with the CPO (EMPs must be the service subscriber) and forwards the eRoamingAuthorizeStart request to all these EMPs (broadcast). Hubject consolidates all EMP responses and creates an overall response, authorizing the request in case that one EMP authorized the request.

image::images/authorizestart_online.png[]

In case that the request for authorization was not successful, Hubject deletes the corresponding SessionID for the charging process.

The response from Hubject to the CPO contains authorization details and in case of successful authorization the created SessionID and the ProviderID of the authorizing provider.

[[eRoamingAuthorizeStartmessage]]
==== eRoamingAuthorizeStart Message

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:O:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
OperatorID:<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>:The OperatorID is defined by Hubject and is used to identify the CPO.:M:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:O:
Identification:<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>:Authentication data used to authorize the user or car.:M:
PartnerProductID:<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>:A pricing product name (for identifying a tariff) that must be unique:O:
|========================

 Best Practices:
 - The EVSE ID is optional for this message which is e.g. defined after the RFID authorization at a charge point. If the Evse ID can be provided, we recommend the CPO to include the EVSE ID in this message; it will help for support matters.
 - If an authorization process could not successfully be executed, please set an error code by refering to the error code list mentioned in the OICP document.

[[eRoamingAuthorizationStart]]
=== eRoamingAuthorizationStart
[NOTE]
====
- To `SEND`
- Implementation: `MANDATORY`
====

eRoamingAuthorizationStart is a message that authorizes a user to charge a car.

NOTE: This message describes the response which has to be sent in response to the eRoamingAuthorizeStart and is only mandatory for online EMPs.

[[eRoamingAuthorizationStartmessage]]
==== eRoamingAuthorizationStart Message

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:O:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
ProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP. In case of a positive authorization this field will be filled.:O:
AuthorizationStatus:<<03_EMP_Data_Types.adoc#AuthorizationStatusType,AuthorizationStatusType>>:Information specifying whether the user is authorized to charge or not.:M:
StatusCode:<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>:Structured status details. Can be used to specify the reason for a failed authorization:M:
AuthorizationStopIdentifications:List <<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>:A list of Identification data that is authorized to stop the charging process.:O:
|========================

[[eRoamingAuthorizeStop]]
=== eRoamingAuthorizeStop_V2.1

[NOTE]
====
- To `RECEIVE`
- Implementation: `OPTIONAL`
====

- Request message:<<eRoamingAuthorizeStopmessage, eRoamingAuthorizeStop>>
- Response message:<<eRoamingAuthorizationStopmessage, eRoamingAuthorizationStop>>

image::images/authorizestop.png[]

eRoamingAuthorizeStop basically works in a similar way to the operation eRoamingAuthorizeStart. The request is
sent in order to authorize the stopping of a charging process. The request `MUST` contain the SessionID that was
created by Hubject after the initial eRoamingAuthorizeStart request. In most cases, Hubject can derive the EMP
that authorized the charging process from the SessionID and can directly and offline authorize the request or
forward the request for stopping to the EMP. In case the charging session was originally authorized offline by the
HBS, the session `MUST` only be stopped with the same medium, which was used for starting the session

[[eRoamingAuthorizeStopmessage]]
==== eRoamingAuthorizeStop Message

eRoamingAuthorizeStop is a message to request an authorization for stopping a charging process.

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:M:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
OperatorID:<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>:The OperatorID is defined by Hubject and is used to identify the CPO.:M:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:O:
Identification:<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>:Authentication data used to authorize the user or car.:M:
|========================

[[eRoamingAuthorizationStop]]
=== eRoamingAuthorizationStop

eRoamingAuthorizeStop is a message to request an authorization for stopping a charging process.

NOTE: This message describes the response which has to be sent in return to the eRoamingAuthorizeStop request and is only mandatory for online EMPs.

[[eRoamingAuthorizationStopmessage]]
==== eRoamingAuthorizationStop Message
<<06_EMP_Code_Snippets.adoc#eRoamingAuthorizationStop,eRoamingAuthorizationStop Code Snippet>>

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:O:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
ProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP. In case of a positive authorization this field will be filled.:O:
AuthorizationStatus:<<03_EMP_Data_Types.adoc#AuthorizationStatusType,AuthorizationStatusType>>:Information specifying whether the user is authorized to charge or not.:M:
StatusCode:<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>:Structured status details. Can be used to specify the reason for a failed authorization:M:
|========================

[[eRoamingAuthorizeRemoteStart]]
=== eRoamingAuthorizeRemoteStart_V2.1

[NOTE]
====
- To `SEND`
- Implementation: `MANDATORY`
====

NOTE: This operation is used by EMPs in order to remotely start a charging process

The service that is offered by Hubject in order to allow customers to directly start a charging process via mobile app.

- Request message:<<eRoamingAuthorizeRemoteStartmessage, eRoamingAuthorizeRemoteStart>>
- Response message:<<eRoamingAcknowledgement, eRoamingAcknowledgement>>

image::images/remotestart.png[]

*Functional description:*

*Scenario:*

A customer of an EMP wants to charge a vehicle at a charging station of a CPO. The customer informs his EMP of his intention,
e.g. via mobile phone or smart phone application. The EMP’s provider system can then initiate a charging
process at the CPO’s charging station by sending an eRoamingAuthorizeRemoteStart request to Hubject. The request MUST contain the ProviderID, EvseID and Identification.

Hubject will derive the CPO’s OperatorID from the EvseID.

Hubject will check whether there is a valid contract between the two partners for the service (EMP must be the subscriber).
If so, Hubject continues with checking the charging point compatibility.
In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is
among the uploaded data. If not, Hubject will respond with the status code 603 “Unknown EvseID”.
If yes, Hubject will check whether the charging spot’s property “IsHubjectCompatible” is set “true”.
If the property is false, Hubject will respond with the status code 604 “EvseID is not Hubject compatible”.

In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all,
Hubject generates a SessionID for the following process and forwards the request (including the SessionID) to the CPO.
The CPO `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the charging process will be started and that `MAY`
contain a status code for further information.

In case that the CPO’s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a “false” result and a message
indicating the connection error.

[[eRoamingAuthorizeRemoteStartmessage]]
==== eRoamingAuthorizeRemoteStart Message

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:O:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
ProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP.:M:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:M:
Identification:<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>:Authentication data used to authorize the user or car.:M:
PartnerProductID:<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>:A pricing product name (for identifying a tariff) that must be unique:O:
|========================

Best Practices - The SessionID should not be filled in by the EMP in the initial AuthorizationRemoteStart request. The SessionID is optional for the initial request sent from the EMP message which is e.g. defined as a unique ID from Hubject. The SessionID is then a Mandatory field when the request is sent to the CPO.

[[eRoamingAuthroizeRemoteStop]]
=== eRoamingAuthorizeRemoteStop_V2.1

[NOTE]
====
- To `SEND`
- Implementation: `MANDATORY`
====
- Request message: <<eRoamingAuthorizeRemoteStopmessage,eRoamingAuthorizeRemoteStop>>
- Response message: <<eRoamingAcknowledgement,eRoamingAcknowledgement>>

image::images/remotestop.png[stop,800]

eRoamingAuthorizeRemoteStop basically works in the same way as eRoamingAuthorizeRemoteStart.

The only difference is that this request is sent in order to initiate the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteStart request.

[[eRoamingAuthorizeRemoteStopmessage]]
==== eRoamingAuthorizeRemoteStop Message

eRoamingAuthorizeRemoteStop is a message to request an authorization for stopping a charging process.

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:M:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
ProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP.:M:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:M:
|========================

[[eRoamingChargeDetailRecord]]
=== eRoamingChargeDetailRecord_V2.2

[NOTE]
====
- To `RECEIVE`
- Implementation: `MANDATORY`
====
- Request Message: <<eRoamingChargeDetailRecordmessage,eRoamingChargeDetailRecord>>
- Response Message: <<eRoamingAcknowledgement,eRoamingAcknowledgement>>

image::images/cdr.png[cdr,800,align="center"]

Functional description:

Scenario:

A customer of an EMP has charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The process may have been stopped with an eRoamingAuthorizeStop or an eRoamingAuthorizeRemoteStop operation. A preceding stop request is not a necessary precondition for the processing of an eRoamingChargeDetailRecord request. The CPO’s provider system MUST send an eRoamingChargeDetailRecord (CDR) after the end of the charging process in order to inform the EMP of the charging session data (e.g. meter values and consumed energy) and further charging process details.

NOTE: The CPO `MUST` provide the same SessionID that was assigned to the corresponding charging process. Based on this information Hubject will be able to assign the session data to the correct process.

Hubject will identify the receiving EMP and will forward the CDR to the corresponding EMP. The EMP `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the session data was received successfully and that `MAY` contain a status code for further information.

Hubject will accept only one CDR per SessionID.

In addition to forwarding the CDR to the EMP, Hubject also stores the CDR. In case that the recipient provider’s system cannot be addressed (e.g. due to technical problems), Hubject will nevertheless return to the requestor a positive result provided that storing the CDR was successful.

[[eRoamingChargeDetailRecordmessage]]
==== eRoamingChargeDetailRecord Message
eRoamingChargeDetailRecord is a message containing charging process details (such as meter values, etc.).

IMPORTANT: This message is only mandatory for online EMPs.
[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:M:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
PartnerProductID:<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>:A pricing product name (for identifying a tariff) that must be unique:O:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:M:
Identification:<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>:Authentication data used to authorize the user or car.:M:
ChargingStart:Date/Time:The date and time at which the charging process started.:M:
ChargingEnd:Date/Time:The date and time at which the charging process stopped.:M:
SessionStart:Date/Time:The date and time at which the session started, e.g. swipe of RFID or cable connected.:M:
SessionEnd:Date/Time:The date and time at which the session ended. E. g. Swipe of RFID or Cable disconnected.:M:
MeterValueStart:Decimal (,3):The starting meter value in kWh.:O:
MeterValueEnd:Decimal (,3):The ending meter value in kWh.:O:
MeterValueInBetween:List Meter Value (Decimal (,3)):List of meter values that may have been taken in between (kWh).:O:
ConsumedEnergy:Decimal (,3):The difference between MeterValueEnd and MeterValueStart in kWh.:M:
SignedMeteringValues:List <<03_EMP_Data_Types.adoc#SignedMeteringValuesType,SignedMeteringValuesType>>:Metering Signature basically contains all metering signature values (these values should be in Transparency software format) for different status of charging session for eg start, end or progress. In total you can provide maximum 10 metering signature values:O:
CalibrationLawVerificationInfo:<<03_EMP_Data_Types.adoc#CalibrationLawVerificationType,CalibrationLawVerificationType>>:This field provides additional information which could help directly or indirectly to verify the signed metering value by using respective Transparency Software:O:
HubOperatorID:<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>:Hub operator:O:
HubProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:Hub provider:O:
|========================

[[eRoamingGetChargeDetailRecords]]
=== eRoamingGetChargeDetailRecords_V2.2
[NOTE]
====
- To `SEND`
- Implementation: EMP Online `OPTIONAL`, EMP Offline `MANDATORY`
====
- Request Message: <<eRoamingGetChargeDetailRecordsmessage,eRoamingGetChargeDetailRecord>>
- Response Message: <<eRoamingChargeDetailRecordmessage,eRoamingChargeDetailRecords>>

image::images/getcdr.png[,600,align="center"]

The operation allows EMPs to download CDRs that have been sent to Hubject by partner CPOs. This means if for example Hubject
was unable to forward a CDR from a CPO to an EMP due to technical problems in the EMP’s backend,
the EMP will still have the option of obtaining these CDRs. The EMP `MUST` specify a date range in the request.
Hubject will return a list of all CDRs received by the HBS within the specified date range for the requesting EMP
(i.e. all CDRs within the date range where the corresponding charging process was authorized by the EMP or authorized by Hubject based on the EMP’s authentication data.

Hubject does not check whether a requested CDR has already been provided to the requesting EMP in the past.

*Pagination:*

Starting from OICP 2.3, eRoaminGetChargeDetailRecords uses pagination. This is an implementation that EMPs `MUST` use in order to divide the amount of ChargeDetailRecords contained in the response of the pull request.

The parameters of the pagination are given at the end of the end point: `...?page=0&size=20` where `page` indicates the number of the page for the response and `size` the amount of records to be provided in the response.

*Example*:

Using OICP 2.3 GetChargeDetailRecords endpoint for PROD environment:

https://service.hubject.com/api/oicp/cdrmgmt/v22/providers/{providerID}/get-charge-detail-records-request?page=0&size=1500

In the previous request we are telling to provide page *0* with *1500* records in it.

IMPORTANT: The default number of records provided in the response are *20* elements and the maximum number of records possible to obtain per page are *2000*.

[[eRoamingGetChargeDetailRecordsmessage]]
==== eRoamingGetChargeDetailRecords Message
eRoamingGetChargeDetailRecords is a message to request a list of charge detail records.

IMPORTANT: This message is only mandatory for offline EMPs.

[%header,format=dsv, cols=4]
|========================
Name: Data Type: Description: M/O
ProviderID: <<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP.:M
From:Date/Time:Start of the requested time range.:M
To:Date/Time:End of the requested time range.:M
SessionID:List <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:O
OperatorID:<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>:The OperatorID is defined by Hubject and is used to identify the CPO.:O
CDRForwarded:Boolean:Indicates if the CDR was successfuly forwarded to the EMP or not.:O
|========================

[[eRoamingReservation]]
== eRoamingReservation

The service eRoamingReservation contains two operations.
It `MUST` be offered by Hubject and `MAY` be offered by CPO partner systems. The Service `MUST` be enabled by Hubject for the CPO. If the charging station offers reservation services, the CPO can provide this information in the field <<03_EMP_Data_Types.adoc#ValueAddedServiceType,ValueAddedServices>>.

[[eRoamingAuthorizeRemoteReservationStart]]
=== eRoamingAuthorizeRemoteReservationStart_V1.1

[NOTE]
====
- To `SEND`
- Implementation: `OPTIONAL`
====

NOTE: This operation is used by EMPs in order to remotely reserve a charging point.

- Request message: <<eRoamingAuthorizeRemoteReservationStartmessage,eRoamingAuthorizeRemoteReservationStart>>
- Response message: <<eRoamingAcknowledgement,eRoamingAcknowledgement>>

image::images/remotereservationstart.png[]

[.underline]#*Functional Description:*#

Scenario:


A customer of an EMP wants to reserve a charging point of a CPO for a later charging process. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMP’s provider system can then initiate a reservation of the CPO’s charging point by sending an eRoamingAuthorizeRemoteReservationStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID. The demanded reservation product can be specified using the field PartnerProductID.

Hubject will derive the CPO’s OperatorID from the EvseID.

Hubject will check whether there is a valid contract between the two partners for the service Reservation (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 “Unknown EvseID”. If yes, Hubject will check whether the charging spot’s property “IsHubjectCompatible” is set “true”. If the property is false, Hubject will respond with the status code 604 “EvseID is not Hubject compatible”.

In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the reservation process and forwards the request (including the SessionID) to the CPO. The CPO `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the reservation was successful and that `MAY` contain a status code for further information.

In case that the CPO’s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a “false” result and a message indicating the connection error.

[[eRoamingAuthorizeRemoteReservationStartmessage]]
==== eRoamingAuthorizeRemoteReservationStart Message

eRoamingAuthorizeRemoteReservationStart is a message to request a reservation of a charging spot.

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:O:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
ProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP.:M:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:M:
Identification:<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>:Authentication data used to authorize the user or car.:M:
PartnerProductID:<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>:A pricing product name (for identifying a tariff) that must be unique:O:
Duration:Integer:Duration of reservation in minutes:O:2
|========================

[[eRoamingAuthorizeRemoteReservationStop]]
=== eRoamingAuthorizeRemoteReservationStop_V1.1

[NOTE]
====
- To `SEND`
- Implementation: `OPTIONAL`
====

- Request message: <<eRoamingAuthorizeRemoteReservationStopmessage,eRoamingAuthorizeRemoteReservationStop>>
- Response message: <<eRoamingAcknowledgement,eRoamingAcknowledgement>>

image::images/remotereservationstop.png[]

eRoamingAuthorizeRemoteReservationStop basically works in the same way as eRoamingAuthorizeRemoteReservationStart.

The only difference is that this request is sent in order to end the reservation of a charging spot. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteReservationStart request. After the eRoamingAuthorizeRemoteReservationStop the CPO `MUST` provide a CDR.

[[eRoamingAuthorizeRemoteReservationStopmessage]]
==== eRoamingAuthorizeRemoteReservationStopmessage

eRoamingAuthorizeRemoteReservationStop is a message to request the end of a reservation of a charging spot.

[%header,format=dsv, cols=5]
|========================
Name: Data Type: Description: M/O: Field Length
SessionID: <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>:The Hubject SessionID that identifies the process:M:
CPOPartnerSessionID:String:Optional field containing the session id assigned by the CPO to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
EMPPartnerSessionID:String:Optional field containing the session id assigned by an EMP to the related operation. Partner systems can use this field to link their own session handling to HBS processes.:O:250
ProviderID:<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>:The ProviderID is defined by Hubject and is used to identify the EMP.:M:
EvseID:<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>:The ID that identifies the charging spot.:M:
|========================

[[eRoamingAuthenticationData]]
== eRoamingAuthenticationData


This service is only offered by Hubject.

In addition to the online authorization service that requests customer authentication data on demand from the connected partner systems, Hubject offers the possibility to upload authentication data.

If an EMP uploads their data to Hubject, Hubject can authorize requests from other partners (e.g. CPOs) without having to forward the request to the EMP. The eRoamingPushAuthenticationData operation gives EMPs the possibility to upload (push) authentication data to the HBS.

Furthermore, Hub EMPs may also push authentication data of sub-EMPs. Hubject does not distinguish between authentication records of hub providers and their related sub providers.

[[eRoamingPushAuthenticationData]]
=== eRoamingPushAuthenticationData_V2.1
[NOTE]
====
- To `SEND`
- Implementation: `MANDATORY`
====
- Request message: <<eRoamingPushAuthenticationDatamessage,eRoamingPushAuthenticationData>>
- Response message: <<eRoamingAcknowledgement,eRoamingAcknowledgement>>

image::images/pushauthentificationdata.png[]

When an EMP sends an eRoamingPushAuthenticationData request,
Hubject checks whether there is a valid contract between Hubject and the EMP for the service type (Hubject must be the subscriber).
If so, the operation allows uploading authentication data to Hubject. Furthermore, it is possible to update authentication data that has been pushed with
an earlier operation request. How Hubject handles the transferred data MUST be defined in the request field “ActionType”, which offers four options (see below).

The authentication data to be inserted or updated `MUST` be provided with the “ProviderAuthenticationData” field, which consists of “AuthenticationDataRecord”
structures. Hubject keeps a history of all updated and changed data records. Every successful push operation – irrespective of the performed action – leads to a
new version of currently valid data records. Furthermore, each operation is logged with the current timestamp.
Thus, Hubject can reconstruct the status of authentication data for every point in time in the past.

*Action types:*

* *fullLoad:* The EMP uploads the full set of current authentication data. Hubject does not compare the new data to old (earlier pushed) data. It keeps a history of old data records and handles the newly provided data as valid.
In order to allow an easy deletion of all records, it is possible to perform a fullLoad with an empty list of records.

* *insert:*  The EMP adds further authentication data records to the current set of data. Hubject verifies that the provided data records do not already exist in the currently valid data status. If so, the transaction will be aborted, no data will be inserted, and the request will be answered with an error message. Error details will be provided with the “AdditionalInfo” field.
* *update:*  The EMP updates data records of the current set of data. Hubject verifies that the provided data records do exist in the currently valid data status. If not, the transaction will be aborted, no data will be updated, and the request will be answered with an error message.
* *delete:*  The EMP deletes data records of the current set of data.

*PIN security:*

The authentication data records that are uploaded to Hubject contain one of the defined identification types. The identification type “QRCodeIdentificationType”
contains – besides an “EvcoID” field – a “PIN” field or a “HashedPIN” field (only one of the two options must be provided).
For security reasons, Hubject generally does not store PINs in clear text, but always as encrypted hash values.
When uploading authentication data to Hubject, the EMPs can directly provide hashed PIN values (using the field “HashedPIN”).
In case that the PINs are provided in clear text (field “PIN”), Hubject will generate a hash value for every PIN and will store only the hashes.
Hubject by default generates a hash using Bcrypt as a hashing function.

In case that an EMP provides already hashed PINs, he `MUST` also specify the corresponding hash generation algorithm so that Hubject can reproduce the hash generation when processing a request for authorization. For this reason, the “HashedPIN” field contains detailed information concerning the hash function and the hash salt value (for salted hash functions) that must be used for hash generation.

*EVCO consistency:*

EvcoIDs contain the ID of the corresponding EMP. With every data upload operation Hubject checks whether the given EMP’s ProviderID (or Sub-ProviderIDs if necessary) matches every given EvcoID. If not, Hubject refuses the data upload and responds with the status code 019.

NOTE: The eRoamingPushAuthenticationData operation `MUST` always be used sequentially.

[[eRoamingPushAuthenticationDatamessage]]
==== eRoamingPushAuthenticationData Message
eRoamingPushAuthenticationData is a message that is sent in order to upload authentication data to Hubject.

NOTE: This message is only for EMPs onboarded to the Hubject platform as offline EMPs.

[%header]
|====
|Name| Data Type| Description| M/O
|ActionType|
One of the following:

- fullLoad

- update

- insert

- delete

|Describes the action that has to be performed by Hubject with the provided data.|M
|ProviderAuthenticationData| <<03_EMP_Data_Types.adoc#ProviderAuthenticationDataType,ProviderAuthenticationDataType>>||M
|====


[[eRoamingEvseData]]
== eRoamingEvseData

Hubject offers the possibility to upload and download charging spot (EVSE) data and, thus, to exchange data between different partners.

See <<04_Appendix.adoc#BusinessProcessDiagrameRoamingeEVSEData, Appendix>>  for a detailed business process diagram regarding the EVSE data service.

The eRoamingPullEVSEData gives the EMPs the possibility to download (pull) EVSE data from partner operators via Hubject.
Hub CPOs may also push EVSE data of sub operators. Hubject does not distinguish between EVSE records of hub operators and related sub operators.

[[eRoamingPullEvseData]]
=== eRoamingPullEvseData_V2.3

[NOTE]
====
- To `SEND`
- Implementation: `MANDATORY`
====
- <<eRoamingPullEVSEDatamessage,Request message: eRoamingPullEVSEData>>
- <<eRoamingEVSEDatamessage,Response message: eRoamingEVSEData>>

image::images/pullevsedata.png[]

When an EMP sends an eRoamingPullEVSEData request, Hubject checks whether there is a valid contract between Hubject and the EMP for the service type (EMP must be the subscriber). If so, the operation allows downloading EVSEData from Hubject. When an EMP sends an eRoamingPullEVSEData request, Hubject identifies all currently valid EVSEData records of all operators.

For every EVSE data record Hubject identifies the timestamp of the last update, which has been performed on the record. The timestamp is returned with the attribute “lastUpdate”.

*Delta pull:*

As mentioned above, the operation by default returns all currently valid EVSE data records. However, the requesting EMP has the possibility to download only the changes (delta) compared to a certain time in the past. In order to do so, the EMP `MUST` provide the optional date/time field “LastCall”, indicating his last EVSE pull request. In case that Hubject receives the LastCall parameter, Hubject compares the EVSE records from the time of the last call with the currently valid records. As a result, Hubject assigns the attribute “deltaType” (possible values: insert, update, delete) to every response <<03_EMP_Data_Types.adoc#PullEvseDataRecordType,EVSE data record>> indicating whether the particular record has been inserted, updated or deleted in the meantime. EVSE data records that have not changed will not be part of the response.

NOTE: The delta pull option cannot be combined with radial search, because in some cases this could lead to data inconsistency on the EMP’s side. This is why the API only allows the provision of either the attribute “SearchCenter” or “LastCall”.

*Pagination:*

Starting from OICP 2.3, eRoamingPullEvseData uses pagination. This is an implementation that EMPs `MUST` use in order to divide the amount of EvseDataRecords contained in the response of the pull request.

The parameters of the pagination are given at the end of the end point: `...?page=0&size=20` where `page` indicates the number of the page for the response and `size` the amount of records to be provided in the response.

IMPORTANT:  *The default number of records provided in the eRoamingEvseData response is 20 elements.*


[[eRoamingPullEVSEDatamessage]]
==== eRoamingPullEVSEData Message
eRoamingPullEVSEData is a message that is sent in order to request the download of EVSE data of operators stored on the Hubject system.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	ProviderID	|	<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>	|	Identifies the provider	|	M
|	SearchCenter	|	<<03_EMP_Data_Types.adoc#SearchCenterType,SearchCenterType>>	|	"The data can be restricted using search parameters that are provided in this field.

Cannot be combined with “LastCall”."	|	O
|	LastCall	|	Date/Time	|	"In case that this field is set, Hubject does not return the currently valid set of EVSE data but the changes compared to the status of EVSE data at the time of the last call.
Cannot be combined with “SearchCenter”, “CountryCodes”, and “OperatorIDs”. "	|	O
|	GeoCoordinatesRe sponseFormat	|	<<03_EMP_Data_Types.adoc#GeoCoordinatesResponseFormatType,GeoCoordinatesResponseFormatType>>	|	Defines the format of geo coordinates that shall be provided with the response.	|	M
|	CountryCodes	|	List <<03_EMP_Data_Types.adoc#CountryCodeType,CountryCodeType>>	|	"A list of countries whose EVSE’s a provider wants to retrieve.
Cannot be combined with “LastCall”."	|	O
|	OperatorIds	|	List <<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>	|	"A list of Operator Ids in ISO or DIN standard to download only EVSE’s of one or more operators.
Cannot be combined with “LastCall”."	|	O
|	AuthenticationModes	|	List <<03_EMP_Data_Types.adoc#AuthenticationModeType,AuthenticationModeType>>	|	 A list of Authentication Modes to start a charging process	|	O
|	Accessibility	|	List <<03_EMP_Data_Types.adoc#AccessibilityType,AccessibilityType>>	|	A list of accessibility of the charging point	|	O
|	CalibrationLawDataAvailability	|	List <<03_EMP_Data_Types.adoc#CalibrationLawDataAvailabilityType,CalibrationLawDataAvailabilityType>>	|	A list of how caliration law data is provided by the charging point	|	O
|	RenewableEnergy	|	Boolean	|	Select the charging stations use Renewable energy or not	|	O
|	IsHubjectCompatible	|	Boolean	|	Select if the charging station is Hubject Compatible	|	O
|	IsOpen24Hours	|	Boolean	|	Select the charging stations that are open 24 hours.	|	O
|====

TIP: We recommend to send a daily request

[[eRoamingEVSEDatamessage]]
==== eRoamingEVSEData Message

eRoamingEVSEData is sent in response to eRoamingPullEVSEData requests.

NOTE: This message describes the response which has to be received as response to the eRoamingPullEVSEData request


[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	content	|	List <<03_EMP_Data_Types.adoc#PullEvseDataRecordType,PullEvseDataRecordType>>	|	A list of EVSE data blocks that are each assigned to a certain operator.	|	M
|number|Integer|Number of the page|M
|size|Integer|Size of records requested per page|M
|totalElements|Integer|Number of total charging stations available from the request|M
|last|Boolean|Indicates if the current page is the last page|M
|totalPages|Integer|Number of total pages available for the request |M
|first|Boolean|indicates if the current page is the first page |M
|numberOfElements|Integer|Number of records in the page|M
|StatusCode	|	<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>	|	This can be used e.g. for failure messages or further information regarding the result.	|	M
|====

[[eRoamingEvseStatus]]
== eRoamingEvseStatus

Hubject offers the possibility to upload and download dynamic charging spot (EVSE) status information and thus to exchange the data between different partners.

The eRoamingEVSEStatus service offers two operations:

. eRoamingPushEVSEStatus in order to give CPOs the possibility to upload (push) EVSEStatus data
. eRoamingPullEVSEStatus in order to give EMPs the possibility to download (pull) EVSE status data from partner operators via Hubject.

Hub CPOs may also push EVSE status records of sub operators. Hubject does not distinguish between EVSEStatus records of hub operators and related sub operators.

[[eRoamingPullEvseStatus]]
=== eRoamingPullEvseStatus_V2.1

[NOTE]
====
- To `SEND`
- Implementation: `MANDATORY`
====
- <<eRoamingPullEVSEStatusmessage,Request message: eRoamingPullEVSEStatus>>
- <<eRoamingEVSEStatusmessage,Response message: eRoamingEVSEStatus>>

image::images/pullevsestatus.png[]

When an EMP sends an eRoamingPullEVSEStatus request, Hubject checks whether there is a valid contract between Hubject and the EMP for the service
type (EMP must be the subscriber). If so, the operation allows downloading EVSE status data from Hubject.
When an EMP sends an eRoamingPullEVSEStatus request, Hubject identifies all currently valid EVSE status records of all operators.

Hubject groups all resulting EVSE status records according to the related CPO.
The response structure contains an “EvseStatuses” node that envelopes an “OperatorEVSEStatus”
node for every CPO with currently valid and accessible status data records.

[[eRoamingPullEVSEStatusmessage]]
==== eRoamingPullEVSEStatus Message

eRoamingPullEVSEStatus is a message that is sent in order to request the download of EVSE status data stored on the Hubject system

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	ProviderID	|	<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>	|	Identifies the provider	|	M
|	SearchCenter	|	<<03_EMP_Data_Types.adoc#SearchCenterType,SearchCenterType>>	|	The data can be restricted using search parameters, which are provided in this field.	|	O
|	EVSEStatus	|	<<03_EMP_Data_Types.adoc#EvseStatusType,EVSEStatusType>>	|	Status of the EVSE	|	O
|====

[TIP]
====
- In case not all but a specific EVSE status is needed, Hubject offers the service <<eRoamingPullEVSEStatusByIDmessage,eRoamingPullEVSEStatusByID>> and <<eRoamingPullEVSEStatusByOperatorIDmessage,eRoamingPullEVSEStatusByOperatorID>>.
- We recommend a to send the request with a frequency from 1 to 5 minutes.
====

[[eRoamingPullEVSEStatusByIDmessage]]
==== eRoamingPullEVSEStatusByID Message
eRoamingPullEVSEStatusByID is a message that is sent in order to request the EVSE status data for specific EVSE IDs.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	ProviderID	|	<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>	|	Identifies the provider	|	M
|	EvseID	|	List <<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>	|	The list MUST not contain more than 100 EvseIDs 	|	M
|====

[[eRoamingPullEVSEStatusByOperatorIDmessage]]
==== eRoamingPullEVSEStatusByOperatorID Message

eRoamingPullEVSEStatusByOperatorID is a message that is sent in order to request the EVSE status data for specific OperatorsIDs (i.e. CPO(s) specific EVSE status data).

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	ProviderID	|	<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType>>	|	Identifies the provider	|	M
|	OperatorID	|	List <<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>	|	A list of Operator Ids in ISO or DIN standard to download only EVSE’s of one or more operators	|	M
|====

[[eRoamingEVSEStatusmessage]]
==== eRoamingEVSEStatus Message

eRoamingEVSEStatus is sent in response to eRoamingPullEVSEStatus or eRoamingPullEVSEStatusByOperatorID requests.

NOTE: This message describes the response which will be received as response to the eRoamingPullEVSEStatus or eRoamingPullEVSEStatusByOperatorID request.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	EvseStatuses	|	<<03_EMP_Data_Types.adoc#EvseStatusByOperatorIDResponseType,EvseStatusByOperatorIDResponseType>>	|	A list of EVSE status blocks that are each assigned to a certain operator.	|	M 0...n
|	StatusCode	|	<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>	|	This can be used e.g. for failure messages or further information regarding the result.	|	O
|====

[[eRoamingEVSEStatusByIDmessage]]
==== eRoamingEVSEStatusByID Message

eRoamingEVSEStatusByID is sent in response to eRoamingPullEVSEStatusByID requests.

NOTE: This message describes the response which will be received as response to the eRoamingPullEVSEStatusByID request.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	EVSEStatusRecords	|	<<03_EMP_Data_Types.adoc#EvseStatusByIDResponseType,EvseStatusByIDResponseType>>	|	A list of the requested EVSE status.	|	M 0...n
|	StatusCode	|	<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>	|	This can be used e.g. for failure messages or further information regarding the result.	|	O
|====


[[eRoamingDynamicPricing]]
== eRoamingDynamicPricing

Since OICP 2.2, HBS  offers the possibility to flexibly or dynamically price Authorization services. The service mainly enables pushing (upload) and pulling (download) of pricing data to and from the HBS through webservice requests and/or downloads/uploads in the Hubject portal.

Flexible pricing enables CPOs to offer differentiated pricing (in multiple currencies) of charging processes at their charging stations. The differentiation of prices can be done along relevant dimensions such as charging facility characteristics (e.g. maximum charging power), EVSE location and time. OICP 2.2 and OICP 2.3 offers the possibility to exchange this flexible price differentiation over webservice communication between CPOs and EMPs.

In addition to the above flexible pricing capability, OICP 2.2 and OICP 2.3 enables more frequent and near real-time update and exchange of pricing information between CPOs and EMPs. This is achieved whereby a CPO continuously pushes valid prices to the HBS for specific EMPs to pull these prices.

With OICP 2.2 and OICP 2.3 , the HBS offers an extensive breadth of technical capabilities for flexible and dynamic pricing of charging services for CPOs. Please refer to the supplementary document https://support.hubject.com/hc/en-us/categories/360000238177-Flexible-Dynamic-Pricing[“Dynamic Pricing - Functional Guide for Service Implementation”] for more details and a holistic view (technical and business perspectives) of how to best capitalize on the capabilities offered by the eRoamingDynamicPricing service.

The eRoamingDynamicPricing service offers four operations, namely the:

. eRoamingPushPricingProductData operation which gives CPOs the possibility to upload (push) pricing product information. Pricing products refer to the different tariffs offered by a CPO based on the differentiation dimensions mentioned above.
. eRoamingPushEVSEPricing operation which gives CPOs the possibility to assign their various pricing products to individual EVSEs and thereby upload (push) location/EVSE-specific pricing data.
. eRoamingPullPricingProductData operation which gives EMPs the possibility to download (pull) pricing product information uploaded by a CPO for the respective EMP.
. eRoamingPullEVSEPricing operation which gives EMPs the possibility to download (pull) location/EVSE-specific pricing data uploaded by CPOs for the respective EMP.

[[eRoamingPullPricingProductData]]
=== eRoamingPullPricingProductData_V1.0
[NOTE]
====
- To `SEND`
- Implementation: `OPTIONAL`
====
- <<eRoamingPullPricingProductDatamessage,Request message: eRoamingPullPricingProductData>>
- <<eRoamingPricingProductDatamessage,Response message: eRoamingPricingProductData>>

When an EMP sends an eRoamingPullPricingProductData request, Hubject checks whether there is a valid flexible/dynamic pricing business contract
(for the service type Authorization) between the EMP and the CPOs whose OperatorIDs are sent in the request.
If so, the operation allows the download of pricing product data pushed to the HBS by these CPOs for the requesting EMP.
When this request is received from an EMP, currently valid pricing products data available in the HBS for the requesting EMP (and pushed by CPOs whose OperatorIDs are supplied in the request) are grouped by OperatorID and sent in response to the request.

The operation also allows the use of the LastCall filter. When the LastCall filter is used, only pricing product data changes that have taken place after the date/time value provided in the “LastCall" field of the request are sent to the EMP.

[[eRoamingPullPricingProductDatamessage]]
==== eRoamingPullPricingProductData Message

eRoamingPullPricingProductData is a message that is sent in order to request the download of pricing data available in the HBS for an EMP.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	LastCall	|	Date/Time|	In case that this field is set, Hubject does not return the entire set of currently valid pricing products data but just the changes that have taken places since the last call date/time value.|O
|	OperatorIDs	|	<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>	|	A list of Operator Ids in ISO or DIN standard to download pricing data pushed by one or more operators.	|	M
|====

[[eRoamingPricingProductDatamessage]]
==== eRoamingPricingProductData Message

eRoamingPricingProductData is sent in response to eRoamingPullPricingProductData requests.

NOTE: This message describes the response which has to be sent in reply to the eRoamingPullPricingProductData request.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	PricingProductData	|	List <<03_EMP_Data_Types.adoc#PricingProductDataType,PricingProductDataType>>|List of pricing products offered by operators for a specific provider	|M
|	StatusCode	|	<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>	| This can be used e.g. for failure messages or further information regarding the result.|	O
|====

[[eRoamingPullEVSEPricing]]
=== eRoamingPullEVSEPricing_V1.0

[NOTE]
====
- To `SEND`
- Implementation: `OPTIONAL`
====
- <<eRoamingPullEVSEPricingmessage,Request message: eRoamingPullEVSEPricing>>
- <<eRoamingEVSEPricingmessage,Response message: eRoamingEVSEPricing>>

When an EMP sends an eRoamingPullPricingProductData request, Hubject checks whether there is a valid flexible/dynamic pricing business contract
(for the service type Authorization) between the EMP and the CPOs whose OperatorIDs are sent in the request.
If so, the operation allows the download of EVSE pricing data pushed to the HBS by these CPOs for the requesting EMP.
When this request is received from an EMP, currently valid EVSE pricing data available in the HBS for the requesting
EMP are grouped by OperatorID and sent in response to the request.

The operation also allows the use of the LastCall filter. When the LastCall filter is used, only EVSE pricing data changes that have taken
place after the date/time value provided in the “LastCall" field of the request are sent to the EMP.

[[eRoamingPullEVSEPricingmessage]]
==== eRoamingPullEVSEPricing Message

eRoamingPullEVSEPricing is a message that is sent in order to request the download of (i.e.pull) location/EVSE-specific pricing data uploaded by CPOs for the requesting EMP.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	ProviderID	|<<03_EMP_Data_Types.adoc#ProviderIDType,ProviderIDType >>|Identifies the provider requesting the data pull |M
|	LastCall	|	Date/Time|	In case that this field is set, Hubject does not return the entire set of currently valid pricing products data but just the changes that have taken places since the last call date/time value.|O
|	OperatorIDs	|	<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>	|	A list of Operator Ids in ISO or DIN standard to download pricing data pushed by one or more operators.	|	M
|====

[[eRoamingEVSEPricingmessage]]
==== eRoamingEVSEPricing Message
eRoamingEVSEPricing is sent by the HBS in response to eRoamingPullEVSEPricing requests.

NOTE: This message describes the response which has to be sent in reply to the eRoamingPullEVSEPricing request.

[%header]
|====
|	Name	|	Data Type	|	Description	|	M/O
|	OperatorEVSEPricing	|	List <<03_EMP_Data_Types.adoc#OperatorEVSEPricingType,OperatorEVSEPricingType>>|A list of EVSE pricing data blocks for specific operators |M
|	StatusCode	|	<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>	| This can be used e.g. for failure messages or further information regarding the result.|	O
|====

[[eRoamingChargingNotifications]]
== eRoamingChargingNotifications
[NOTE]
====
- To `RECEIVE`
- Implementation: `OPTIONAL`
====

- <<eRoamingChargingNotificationsstart,Request message: eRoamingChargingNotifications>>
- <<eRoamingAcknowledgement,Response message: eRoamingAcknowledgement>>

image::images/chargingnotifications.png[]

The ChargingNotification feature enables CPOs to notify EMPs about the end of charge

The ChargingNotification feature basically increases the transparency between CPO - EMP - End Consumer to the level of each charging session.

This feature enables CPO to send various notifications during a single Charging Session. These notifications give the details like

. When the charging session has started. The CPO can send ChargingNotification of type “Start” to Hubject containing information like ChargingStart, MeterStartValue, EVSEID etc.
. Consumed Energy values during the charging process or duration of successful charging process that has lapsed. The CPO can send ChargingNotification of type “Progress” to Hubject containing information like ChargingStart, EventOccurred, ChargingDuration, ConsumedEnergyProgress, EVSEID etc. The frequency between two progress notifications for one charging session should be at least 5 minutes.
. When the charging session has ended (because no energy is transmitted anymore). The CPO can send a ChargingNotification of type “End” to Hubject containing information such as ChargingEnd, ConsumedEnergy, EVSEID etc.
. Error occurred before charging starts or during charging process or abrupt changing end. The CPO can send a ChargingNotification of type “Error” to Hubject containing information such as ErrorClass, ErrorAdditionalInfo, EVSEID etc.

Hubject will forward Start, Progress, End and Error notification requests to the EMP. The EMP responds with an eRoamingAcknowledgement. This acknowledgement is then being forwarded to the CPO.

This feature should cover all the notifications that could happen between Session Start and Session End in future. Each bit of information increases transparency to the customer of EMP.

[[eRoamingChargingNotificationsstart]]
=== eRoamingChargingNotifications Start

A customer of EMP Authorizes the charging session at particular charging station (via any means for eg RFID card, Mobile etc). The charging session is authorized by Hubject / CPO system. The authorization of charging process and plugging the cable in EV does not guarantee that energy flow into the Vehicle is initiated. It is really important for for EMP and its end consumer to know if the charging has started.

The CPO’s backend system MAY send a ChargingNotification of type “Start” after the CPO considers the charging of an EV is started (since energy flow have started) in order to inform the EMP that the actual charging (the energy flow) of the vehicle has started.

[[eRoamingChargingNotificationsstartmessage]]
==== eRoamingChargingNotifications Start Message

The ChargingNotification of type “Start” is a message that contains information about the charging start of a session (e.g. ChargingStart).

[%header]
|=====
|Name| Data Type| Description| M/O| Field Length
|Type|<<03_EMP_Data_Types.adoc#ChargingNotificationType,ChargingNotificationType>>|The type of ChargingNotification. For this case only the notification type “Start” can be chosen.|M|
|SessionID |<<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>|The Hubject SessionID that identifies the process. |M|
|CPOPartnerSessionID|String|Optional field containing the session ID assigned by the CPO to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.
|O|250
|EMPPartnerSessionID| String|Optional field containing the session ID assigned by an EMP to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.|O|250
|Identification|<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>|Authentication data|O|
|EvseID|<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>|The ID that identifies the charging spot.|M|
|ChargingStart |Date/Time |The date and time at which the charging process started.|M|
|SessionStart  |Date/Time|The date and time at which the session started, e.g. swipe of RFID or cable connected.|O|
|MeterValueStart   |Decimal (,3)|The starting meter value in kWh.|O|
|OperatorID|<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>|The OperatorID is used to identify the CPO.|O|
|PartnerProductID|<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>|A pricing product name (for identifying a tariff) that must be unique|O|
|=====

[[eRoamingChargingNotificationsprogress]]
=== eRoamingChargingNotifications Progress

A customer of EMP has started the charging session. Just like as that of regular gasoline stations customer would like to know either how much charging Duration have passed or how much energy is consumed by the EV so far. This information will help Customer to decide if he/she wants to stop the charging session as per their affordability or journey planning.

The CPO’s backend system MAY send a ChargingNotification of type “Progess” after the CPO gets the charging energy or time information from EVSEID. This is required in order to inform the EMP that the progress energy or charging duration for a particular charging session.

[[eRoamingChargingNotificationsprogressmessage]]
==== eRoamingChargingNotifications Progress Message

The ChargingNotification of type “Progress” is a message that contains information about the charging Duration or energy consumed during charging process (e.g. EventOccurred, ChargingDuration, ConsumedEnergyProgress).

[%header]
|=====
|Name| Data Type| Description| M/O| Field Length
|Type|<<03_EMP_Data_Types.adoc#ChargingNotificationType,ChargingNotificationType>>|The type of ChargingNotification. For this case only the notification type “Progress” can be chosen.|M|
|SessionID |<<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>|The Hubject SessionID that identifies the process. |M|
|CPOPartnerSessionID|String|Optional field containing the session ID assigned by the CPO to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.
|O|250
|EMPPartnerSessionID| String|Optional field containing the session ID assigned by an EMP to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.|O|250
|Identification|<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>|Authentication data|O|
|EvseID|<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>|The ID that identifies the charging spot.|M|
|ChargingStart |Date/Time |The date and time at which the charging process started.|M|
|EventOccurred|Date/Time|The date and time at which the charging progress parameters are captured.|M|
|ChargingDuration|Integer|Charging Duration = EventOccurred - Charging Duration. It is a time in millisecond.

Either ChargingDuration or ConsumedEnergyProgress should be provided. Both can also be provided with each progress notification.|O/M|
|SessionStart  |Date/Time|The date and time at which the session started, e.g. swipe of RFID or cable connected.|O|
|ConsumedEnergyProgress|Decimal (,3)|This is consumed energy when from Start of charging process till the charging progress notification generated (EventOccurred)

Either ChargingDuration or ConsumedEnergyProgress should be provided. Both can also be provided with each progress notification.|O|
|MeterValueStart   |Decimal (,3)|The starting meter value in kWh.|O|
|MeterValueInBetween|List (MeterValue (Decimal (,3)))|List of meter values that may have been taken in between (kWh).|O|
|OperatorID|<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>|The OperatorID is used to identify the CPO.|O|
|PartnerProductID|<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>|A pricing product name (for identifying a tariff) that must be unique|O|
|=====

[[eRoamingChargingNotificationsend]]
=== eRoamingChargingNotifications End

A customer of an EMP has fully charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The energy flow has ended, but the process has not yet been stopped and the vehicle is blocking the charging station.

The CPO’s backend system MAY send a ChargingNotification of type “End” after the CPO considers the charging of an EV concluded (because no energy is transmitted anymore) in order to inform the EMP that the actual charging (the energy flow) of the vehicle has stopped. The charging process has not yet been stopped by the customer and the session is still active.

[[eRoamingChargingNotificationsendmessage]]
==== eRoamingChargingNotifications End Message

The ChargingNotification of type “End” is a message that contains information about the charging end of a session (e.g. ConsumedEnergy, ChargingEnd).

[%header]
|=====
|Name| Data Type| Description| M/O| Field Length
|Type|<<03_EMP_Data_Types.adoc#ChargingNotificationType,ChargingNotificationType>>|The type of ChargingNotification. For this case only the notification type “End” can be chosen.|M|
|SessionID |<<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>|The Hubject SessionID that identifies the process. |M|
|CPOPartnerSessionID|String|Optional field containing the session ID assigned by the CPO to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.
|O|250
|EMPPartnerSessionID| String|Optional field containing the session ID assigned by an EMP to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.|O|250
|Identification|<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>|Authentication data|O|
|EvseID|<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>|The ID that identifies the charging spot.|M|
|ChargingStart |Date/Time |The date and time at which the charging process started.|O|
|ChargingEnd |Date/Time |The date and time at which the charging process stopped.|M|
|SessionStart  |Date/Time|The date and time at which the session started, e.g. swipe of RFID or cable connected.|O|
|SessionEnd  |Date/Time|The date and time at which the session ended, e.g. swipe of RFID or cable disconnected.|O|
|ConsumedEnergy|Decimal(,3)|The difference between MeterValueEnd and MeterValueStart in kWh.|O|
|MeterValueStart   |Decimal (,3)|The starting meter value in kWh.|O|
|MeterValueEnd|Decimal (,3)|The ending meter value in kWh.|O|
|MeterValueInBetween|List (MeterValue (Decimal (,3)))|List of meter values that may have been taken in between (kWh).|O|
|OperatorID|<<03_EMP_Data_Types.adoc#OperatorIDType,OperatorIDType>>|The OperatorID is used to identify the CPO.|O|
|PartnerProductID|<<03_EMP_Data_Types.adoc#ProductIDType,ProductIDType>>|A pricing product name (for identifying a tariff) that must be unique|O|
|PenaltyTimeStart|Date/Time|The date and time at which the penalty time start after the grace period.|O|
|=====

[[eRoamingChargingNotificationsError]]
=== eRoamingChargingNotifications Error

A customer of EMP Authorizes the charging session at particular charging station (via any means for eg REFID card, Mobile etc). Due to some errors sometime, it is possible that charging does not start or charging process is abruptly stopped or fluctuations in the charging process. It is really important for Customer as well as EMP to know what exactly is happening at the charging process. This notification eventually helps EMPs well informed about the problem occurred with the charging process. This information can be easily passed onto Customer so that he/she can take appropriate action.

The CPO’s backend system `MAY` send a ChargingNotification of type “Error” after the CPO gets an information about the error at the charging station. The CPO can transmit one of the ErrorClass defined by Hubject along with the additional information which elaborated the Error. The customer has to take one of the three action EV needs to be charged at some different station, Cables is properly attached or the error is for information only no action required by customer.

[[eRoamingChargingNotificationserrormessage]]
==== eRoamingChargingNotifications Error Message

The ChargingNotification of type “Error” is a message that contains information about the charging end of a session (e.g. ErrorClass, ErrorAdditionalInfo).

[%header]
|=====
|Name| Data Type| Description| M/O| Field Length
|Type|<<03_EMP_Data_Types.adoc#ChargingNotificationType,ChargingNotificationType>>|The type of ChargingNotification. For this case only the notification type “Error” can be chosen.|M|
|SessionID |<<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>|The Hubject SessionID that identifies the process. |M|
|CPOPartnerSessionID|String|Optional field containing the session ID assigned by the CPO to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.
|O|250
|EMPPartnerSessionID| String|Optional field containing the session ID assigned by an EMP to the related operation.

Partner systems can use this field to link their own session handling to HBS processes.|O|250
|Identification|<<03_EMP_Data_Types.adoc#IdentificationType,IdentificationType>>|Authentication data|O|
|EvseID|<<03_EMP_Data_Types.adoc#EvseIDType,EvseIDType>>|The ID that identifies the charging spot.|M|
|ErrorType |<<03_EMP_Data_Types.adoc#ErrorClassType,ErrorClassType>>|The error code can be chosen from the list|M|
|ErrorAdditionalInfo|String|The CPO can put in the additional information about the error|O|250
|=====


[[eRoamingAcknowledgement]]
== eRoamingAcknowledgement

[NOTE]
====
- To `SEND` and `RECEIVE`
- Implementation: `MANDATORY`
====

The acknowledgement is a message that is sent in response to several requests.

[%header]
|=====
|Name| Data Type| Description| M/O| Field Length
|Result | Boolean| If result is true, the message was
received and the respective
operation was performed
successfully.

If result is false, the message was
received and the respective
operation was not performed
successfully.|M|
|StatusCode|<<03_EMP_Data_Types.adoc#StatusCodeType,StatusCodeType>>|Structured status
details.

This can be used e.g. for failure
messages or further information
regarding the result.|M|
|SessionID| <<03_EMP_Data_Types.adoc#SessionIDType,SessionIDType>>|Represents the service process. In some cases the current SessionID is returned to the service requestor in this field|O|
|CPOPartnerSessionID|String|Optional field containing the session id assigned by the CPO to the related operation.|O|250
|EMPPartnerSessionID|String|Optional field containing the session id assigned by an EMP to the related operation.|O|250
|=====

